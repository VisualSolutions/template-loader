/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/IPlayerCommunicator.ts":
/*!************************************!*\
  !*** ./src/IPlayerCommunicator.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Message = void 0;\nvar Message = /** @class */ (function () {\n    function Message(id, messageType, payload) {\n        this.id = id;\n        this.messageType = messageType;\n        this.payload = payload;\n        this.replyPassThroughData = {};\n    }\n    return Message;\n}());\nexports.Message = Message;\n\n\n//# sourceURL=webpack://mtemplate-loader/./src/IPlayerCommunicator.ts?");

/***/ }),

/***/ "./src/PlayerCommunicator.ts":
/*!***********************************!*\
  !*** ./src/PlayerCommunicator.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PlayerCommunicator = void 0;\nvar IPlayerCommunicator_1 = __webpack_require__(/*! ./IPlayerCommunicator */ \"./src/IPlayerCommunicator.ts\");\nvar PromiseResolver = /** @class */ (function () {\n    function PromiseResolver(resolve, reject, timeoutId) {\n        this.resolve = resolve;\n        this.reject = reject;\n        this.timeoutId = timeoutId;\n    }\n    return PromiseResolver;\n}());\nvar Subscriber = /** @class */ (function () {\n    function Subscriber(messageType, onMessage) {\n        this.messageType = messageType;\n        this.onMessage = onMessage;\n    }\n    return Subscriber;\n}());\nvar PlayerCommunicator = /** @class */ (function () {\n    function PlayerCommunicator(messageSender) {\n        this.messageSender = messageSender;\n        this.pendingPromises = new Map();\n        this.subscribers = [];\n        this.messageIdGenerator = 1;\n    }\n    PlayerCommunicator.prototype.sendMessage = function (messageType, payload) {\n        var _this = this;\n        var messageId = this.messageIdGenerator++;\n        if (messageType === \"REQUEST_ACKNOWLEDGE\" || messageType === \"REQUEST_RESPONSE\") {\n            return Promise.resolve();\n        }\n        return new Promise(function (resolve, reject) {\n            var timeoutId = setTimeout(function () { return _this.processPendingPromise(messageId, null, \"Request timeout\"); }, 5000);\n            _this.pendingPromises.set(messageId, new PromiseResolver(resolve, reject, timeoutId));\n            _this.messageSender(new IPlayerCommunicator_1.Message(messageId, messageType, payload));\n        });\n    };\n    PlayerCommunicator.prototype.subscribe = function (messageType, onMessage) {\n        var _this = this;\n        var subscriber = new Subscriber(messageType, onMessage);\n        this.subscribers.push(subscriber);\n        return {\n            unsubscribe: function () {\n                var index = _this.subscribers.indexOf(subscriber);\n                if (index !== -1) {\n                    _this.subscribers.splice(index, 1);\n                }\n            }\n        };\n    };\n    PlayerCommunicator.prototype.onMessageReceived = function (message) {\n        if (message.messageType === \"REQUEST_ACKNOWLEDGE\") {\n            return;\n        }\n        if (message.messageType === \"REQUEST_RESPONSE\") {\n            this.processPendingPromise(message.payload.requestMessageId, message.payload.response, message.payload.error);\n            return;\n        }\n        this.sendMessage(\"REQUEST_ACKNOWLEDGE\", { requestMessageId: message.id });\n        this.subscribers\n            .filter(function (subscriber) { return subscriber.messageType === message.messageType; })\n            .forEach(function (subscriber) {\n            subscriber.onMessage(message);\n        });\n    };\n    PlayerCommunicator.prototype.processPendingPromise = function (messageId, result, error) {\n        var pendingPromise = this.pendingPromises.get(messageId);\n        if (pendingPromise) {\n            this.pendingPromises.delete(messageId);\n            clearTimeout(pendingPromise.timeoutId);\n            if (error) {\n                pendingPromise.reject(error);\n            }\n            else {\n                pendingPromise.resolve(result);\n            }\n        }\n    };\n    return PlayerCommunicator;\n}());\nexports.PlayerCommunicator = PlayerCommunicator;\n\n\n//# sourceURL=webpack://mtemplate-loader/./src/PlayerCommunicator.ts?");

/***/ }),

/***/ "./src/PreviewPlayer.ts":
/*!******************************!*\
  !*** ./src/PreviewPlayer.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PreviewPlayer = void 0;\nvar PreviewPlayer = /** @class */ (function () {\n    function PreviewPlayer() {\n    }\n    PreviewPlayer.prototype.mediaFinished = function (playId) {\n        if (window.frameElement) {\n            window.parent.postMessage({\n                id: window.frameElement.id,\n                action: 'mediaFinished',\n                playId: playId\n            }, \"*\");\n        }\n    };\n    PreviewPlayer.prototype.mediaError = function (playId, message) {\n        if (window.frameElement) {\n            window.parent.postMessage({\n                id: window.frameElement.id,\n                action: 'mediaError',\n                playId: playId,\n                message: message\n            }, \"*\");\n        }\n    };\n    PreviewPlayer.prototype.mediaReady = function (playId, started) {\n        if (window.frameElement) {\n            window.parent.postMessage({\n                id: window.frameElement.id,\n                action: 'mediaReady',\n                playId: playId,\n                started: started\n            }, \"*\");\n        }\n    };\n    PreviewPlayer.prototype.getParameter = function (key) {\n        return null;\n    };\n    PreviewPlayer.prototype.openMediaInZone = function (playId, mediaId, zoneId) {\n    };\n    PreviewPlayer.prototype.executeCommand = function (playId, commandName, commandParamsJson) {\n    };\n    PreviewPlayer.prototype.addPlaybackListener = function (playId, callbackFunction) {\n    };\n    return PreviewPlayer;\n}());\nexports.PreviewPlayer = PreviewPlayer;\n\n\n//# sourceURL=webpack://mtemplate-loader/./src/PreviewPlayer.ts?");

/***/ }),

/***/ "./src/RemotePlayer.ts":
/*!*****************************!*\
  !*** ./src/RemotePlayer.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RemotePlayer = void 0;\nvar RemotePlayer = /** @class */ (function () {\n    function RemotePlayer(sendMessageFunction) {\n        this.sendMessageFunction = sendMessageFunction;\n    }\n    RemotePlayer.prototype.executeCommandImpl = function (playId, commandName, commandParams) {\n        var convertedCommandParams;\n        if ((typeof commandParams) === \"string\") {\n            try {\n                convertedCommandParams = JSON.parse(commandParams);\n            }\n            catch (error) {\n                convertedCommandParams = commandParams;\n            }\n        }\n        else {\n            convertedCommandParams = commandParams;\n        }\n        this.sendMessageFunction({\n            playId: playId,\n            type: commandName,\n            params: convertedCommandParams,\n        });\n    };\n    RemotePlayer.prototype.getParameter = function (key) {\n        return null;\n    };\n    RemotePlayer.prototype.mediaFinished = function (playId) {\n        this.executeCommandImpl(playId, \"PLAYBACK_STATE\", {\n            type: \"MEDIA_FINISHED\",\n        });\n    };\n    RemotePlayer.prototype.mediaError = function (playId, message) {\n        this.executeCommandImpl(playId, \"PLAYBACK_STATE\", {\n            type: \"MEDIA_ERROR\",\n            message: message,\n        });\n    };\n    RemotePlayer.prototype.mediaReady = function (playId, started) {\n        this.executeCommandImpl(playId, \"PLAYBACK_STATE\", {\n            type: \"MEDIA_READY\",\n        });\n    };\n    RemotePlayer.prototype.openMediaInZone = function (playId, mediaId, zoneId) {\n        this.executeCommandImpl(playId, \"MEDIA_PLAY\", {\n            mediaId: mediaId,\n            zoneId: zoneId,\n        });\n    };\n    RemotePlayer.prototype.executeCommand = function (playId, commandName, commandParams) {\n        this.executeCommandImpl(playId, commandName, commandParams);\n    };\n    RemotePlayer.prototype.addPlaybackListener = function (playId, callbackMethod) {\n        this.executeCommandImpl(playId, \"NOTIFICATIONS_REGISTRATION\", {\n            notificationType: \"MEDIA_PLAYBACK\",\n            callbackMethod: callbackMethod,\n        });\n    };\n    return RemotePlayer;\n}());\nexports.RemotePlayer = RemotePlayer;\n\n\n//# sourceURL=webpack://mtemplate-loader/./src/RemotePlayer.ts?");

/***/ }),

/***/ "./src/TemplateLoader.ts":
/*!*******************************!*\
  !*** ./src/TemplateLoader.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Loader = exports.ComponentV1 = exports.Component = exports.Param = exports.PlaybackConstants = void 0;\nvar PreviewPlayer_1 = __webpack_require__(/*! ./PreviewPlayer */ \"./src/PreviewPlayer.ts\");\nvar RemotePlayer_1 = __webpack_require__(/*! ./RemotePlayer */ \"./src/RemotePlayer.ts\");\nvar PlayerCommunicator_1 = __webpack_require__(/*! ./PlayerCommunicator */ \"./src/PlayerCommunicator.ts\");\nvar PlaybackConstants = /** @class */ (function () {\n    function PlaybackConstants() {\n    }\n    PlaybackConstants.DurationAuto = -1;\n    return PlaybackConstants;\n}());\nexports.PlaybackConstants = PlaybackConstants;\nvar PlaybackCommands = /** @class */ (function () {\n    function PlaybackCommands() {\n    }\n    PlaybackCommands.OpenMediaInZone = 'openMediaInZone';\n    PlaybackCommands.PlaybackActionInZone = 'playbackActionInZone';\n    PlaybackCommands.PlaylistDataRequest = 'playlistDataRequest';\n    PlaybackCommands.VotingPlaylistRequest = 'votingPlaylistRequest';\n    PlaybackCommands.RegisterNotifications = 'registerNotifications';\n    PlaybackCommands.CreateCustomZone = 'createCustomZone';\n    PlaybackCommands.DeleteCustomZone = 'deleteCustomZone';\n    PlaybackCommands.ClosePlaybackApp = 'closePlaybackApp';\n    PlaybackCommands.OpenHomeApp = 'openHomeApp';\n    PlaybackCommands.OpenVodApp = 'openVodApp';\n    PlaybackCommands.OpenDiagnosticsApp = 'openDiagnosticsApp';\n    PlaybackCommands.OpenSettingsApp = 'openSettingsApp';\n    PlaybackCommands.OpenApp = 'openApp';\n    PlaybackCommands.SendChannelMessage = 'sendChannelMessage';\n    PlaybackCommands.JoinChannel = 'joinChannel';\n    PlaybackCommands.SendSerialMessage = 'sendSerialMessage';\n    PlaybackCommands.ReceiveSerialMessages = 'receiveSerialMessages';\n    PlaybackCommands.GetNewAnalyticsSessionId = 'getNewAnalyticsSessionId';\n    PlaybackCommands.CreateAnalyticsLog = 'createAnalyticsLog';\n    PlaybackCommands.IsMediaFileAvailable = 'isMediaFileAvailable';\n    return PlaybackCommands;\n}());\nvar Param = /** @class */ (function () {\n    function Param(name, type, value) {\n        this.name = name;\n        this.type = type;\n        this.value = value;\n    }\n    return Param;\n}());\nexports.Param = Param;\nvar Component = /** @class */ (function () {\n    function Component(name, type, params) {\n        this.name = name;\n        this.type = type;\n        this.params = params;\n    }\n    Component.CreateTypelessComponent = function (name, params) {\n        return new this(name, null, params);\n    };\n    return Component;\n}());\nexports.Component = Component;\nvar ComponentV1 = /** @class */ (function () {\n    function ComponentV1(type, value) {\n        this.type = type;\n        this.value = value;\n    }\n    return ComponentV1;\n}());\nexports.ComponentV1 = ComponentV1;\nvar Loader = /** @class */ (function () {\n    function Loader() {\n        var _this = this;\n        this.globalCallbackMethodNameCounter = 0;\n        this.dataJson = this.getParameterByName('data');\n        this.playId = parseInt(this.getParameterByName('playId'));\n        this.platformType = this.getParameterByName('platformType');\n        this.duration = parseInt(this.getParameterByName('duration'));\n        if (isNaN(this.duration)) {\n            this.duration = PlaybackConstants.DurationAuto;\n        }\n        var autoPlayParameter = this.getParameterByName('autoPlay');\n        if (autoPlayParameter) {\n            autoPlayParameter = autoPlayParameter.toLowerCase();\n        }\n        this.started = autoPlayParameter !== 'false';\n        if (!window.Player) {\n            if ((typeof this.platformType === 'string') && this.platformType === \"WebStreaming\") {\n                window.Player = new RemotePlayer_1.RemotePlayer(function (message) {\n                    window.parent.postMessage({\n                        channel: \"MvisionPlayerApi\",\n                        payload: message\n                    }, \"*\");\n                });\n            }\n            else {\n                window.Player = new PreviewPlayer_1.PreviewPlayer();\n                window.addEventListener('message', function (event) {\n                    if (event && event.data && event.data.action && event.data.action === 'play') {\n                        _this.play();\n                    }\n                });\n            }\n        }\n        var communicator = new PlayerCommunicator_1.PlayerCommunicator(function (message) {\n            return _this.executeCommand(\"COMMUNICATOR_MESSAGE\", message);\n        });\n        window[\"messageFromPlayer\"] = function (message) {\n            communicator.onMessageReceived(message);\n        };\n        this.communicator = communicator;\n        this.startPromise = new Promise(function (resolve, reject) {\n            _this.startPromiseResolve = resolve;\n        });\n        if (this.started) {\n            this.startPromiseResolve();\n        }\n        this.componentsPromise = new Promise(function (resolve, reject) {\n            _this.componentsPromiseResolve = resolve;\n        });\n        this.getDataJson();\n    }\n    Loader.prototype.getNextGlobalCallbackMethodName = function () {\n        this.globalCallbackMethodNameCounter = this.globalCallbackMethodNameCounter + 1;\n        return \"mvisionGlobalCallbackMethodName\" + this.globalCallbackMethodNameCounter;\n    };\n    Loader.prototype.setComponents = function (components) {\n        var _this = this;\n        this.componentsPromise = new Promise(function (resolve, reject) {\n            _this.componentsPromiseResolve = resolve;\n            _this.componentsPromiseResolve(components);\n        });\n    };\n    Loader.prototype.getComponents = function () {\n        return this.componentsPromise;\n    };\n    Loader.prototype.getCommunicator = function () {\n        return this.communicator;\n    };\n    Loader.prototype.isStarted = function () {\n        return this.startPromise;\n    };\n    Loader.prototype.getPlatformType = function () {\n        return this.platformType;\n    };\n    Loader.prototype.getDuration = function () {\n        return this.duration;\n    };\n    Loader.prototype.ifDurationNotSetEndIn = function (templateDurationInSeconds) {\n        if (this.duration == PlaybackConstants.DurationAuto) {\n            setTimeout(this.finished, templateDurationInSeconds * 1000);\n        }\n    };\n    Loader.prototype.ready = function () {\n        window.Player.mediaReady(this.playId, this.started);\n    };\n    Loader.prototype.error = function (message) {\n        if (!message) {\n            message = \"Unspecified error.\";\n        }\n        window.Player.mediaError(this.playId, message);\n    };\n    Loader.prototype.finished = function () {\n        window.Player.mediaFinished(this.playId);\n    };\n    Loader.prototype.getPlayerParameter = function (key) {\n        try {\n            return window.Player.getParameter(key);\n        }\n        catch (err) {\n            // method not implemented\n        }\n        return null;\n    };\n    Loader.prototype.getPlayerParameters = function (keys) {\n        return this.executeCommandReturnPromise(\"GET_SITE_PARAMETERS\", {\n            keys: keys\n        });\n    };\n    Loader.prototype.openMediaInZone = function (mediaId, zoneId, loop, startMode) {\n        if (loop === void 0) { loop = false; }\n        if (startMode === void 0) { startMode = null; }\n        try {\n            if (!loop && !startMode) {\n                // legacy method, for android players with version 5.4.2-190102\n                // should delete this conditional in the future\n                window.Player.openMediaInZone(this.playId, mediaId, zoneId);\n            }\n            else {\n                this.executeCommand(PlaybackCommands.OpenMediaInZone, { mediaId: mediaId, zoneId: zoneId, loop: loop, startMode: startMode });\n            }\n        }\n        catch (err) {\n            // method not implemented\n        }\n    };\n    Loader.prototype.stopPlaybackInZone = function (zoneId) {\n        this.executeCommand(PlaybackCommands.PlaybackActionInZone, { type: \"STOP\", zoneId: zoneId });\n    };\n    Loader.prototype.resumeLoopPlaybackInZone = function (zoneId) {\n        this.executeCommand(PlaybackCommands.PlaybackActionInZone, { type: \"RESUME_LOOP_PLAYBACK\", zoneId: zoneId });\n    };\n    Loader.prototype.clearPendingEventsInZone = function (zoneId) {\n        this.executeCommand(PlaybackCommands.PlaybackActionInZone, { type: \"CLEAR_PENDING_EVENTS\", zoneId: zoneId });\n    };\n    Loader.prototype.playNextInZone = function (zoneId) {\n        this.executeCommand(PlaybackCommands.PlaybackActionInZone, { type: \"PLAY_NEXT\", zoneId: zoneId });\n    };\n    Loader.prototype.createCustomZone = function (zoneName, left, top, width, height, persistent, behind, loopingMediaId) {\n        if (behind === void 0) { behind = false; }\n        if (loopingMediaId === void 0) { loopingMediaId = null; }\n        this.executeCommand(PlaybackCommands.CreateCustomZone, {\n            zoneName: zoneName,\n            coordinates: { left: left, top: top, width: width, height: height },\n            behind: behind,\n            persistent: persistent,\n            loopingPlaylistItemId: loopingMediaId\n        });\n    };\n    Loader.prototype.deleteCustomZone = function (zoneName) {\n        this.executeCommand(PlaybackCommands.DeleteCustomZone, { zoneName: zoneName });\n    };\n    Loader.prototype.openMediaInCustomZone = function (mediaId, zoneName, loop, startMode) {\n        if (loop === void 0) { loop = false; }\n        if (startMode === void 0) { startMode = null; }\n        this.executeCommand(PlaybackCommands.OpenMediaInZone, { mediaId: mediaId, zoneName: zoneName, loop: loop, startMode: startMode });\n    };\n    Loader.prototype.stopPlaybackInCustomZone = function (zoneName) {\n        this.executeCommand(PlaybackCommands.PlaybackActionInZone, { type: \"STOP\", zoneName: zoneName });\n    };\n    Loader.prototype.resumeLoopPlaybackInCustomZone = function (zoneName) {\n        this.executeCommand(PlaybackCommands.PlaybackActionInZone, { type: \"RESUME_LOOP_PLAYBACK\", zoneName: zoneName });\n    };\n    Loader.prototype.clearPendingEventsInCustomZone = function (zoneName) {\n        this.executeCommand(PlaybackCommands.PlaybackActionInZone, { type: \"CLEAR_PENDING_EVENTS\", zoneName: zoneName });\n    };\n    Loader.prototype.playNextInCustomZone = function (zoneName) {\n        this.executeCommand(PlaybackCommands.PlaybackActionInZone, { type: \"PLAY_NEXT\", zoneName: zoneName });\n    };\n    Loader.prototype.closePlaybackApp = function () {\n        this.executeCommand(PlaybackCommands.ClosePlaybackApp, {});\n    };\n    Loader.prototype.openHomeApp = function () {\n        this.executeCommand(PlaybackCommands.OpenHomeApp, {});\n    };\n    Loader.prototype.openVodApp = function (initialFolderIdentifier, allowUpNavigationFromInitialFolder) {\n        if (initialFolderIdentifier === void 0) { initialFolderIdentifier = null; }\n        if (allowUpNavigationFromInitialFolder === void 0) { allowUpNavigationFromInitialFolder = false; }\n        this.executeCommand(PlaybackCommands.OpenVodApp, {\n            initialFolderIdentifier: initialFolderIdentifier,\n            allowUpNavigationFromInitialFolder: allowUpNavigationFromInitialFolder\n        });\n    };\n    Loader.prototype.openDiagnosticsApp = function () {\n        this.executeCommand(PlaybackCommands.OpenDiagnosticsApp, {});\n    };\n    Loader.prototype.openSettingsApp = function (params) {\n        if (params === void 0) { params = {}; }\n        this.executeCommand(PlaybackCommands.OpenSettingsApp, params);\n    };\n    Loader.prototype.openApp = function (appId) {\n        this.executeCommand(PlaybackCommands.OpenApp, { appId: appId });\n    };\n    Loader.prototype.getMusicStreamTracks = function (callbackFunction) {\n        this.executeCommand(PlaybackCommands.PlaylistDataRequest, { dataType: \"MUSIC_TRACKS_LIST\", responseCallbackMethod: callbackFunction.name });\n    };\n    Loader.prototype.getActiveMusicPlaylistDataAndTracks = function (callbackFunction) {\n        this.executeCommand(PlaybackCommands.PlaylistDataRequest, { dataType: \"ACTIVE_MUSIC_PLAYLIST_DATA_AND_TRACKS\", responseCallbackMethod: callbackFunction.name });\n    };\n    Loader.prototype.getActiveMusicPlaylistData = function (callbackFunction) {\n        this.executeCommand(PlaybackCommands.PlaylistDataRequest, { dataType: \"ACTIVE_MUSIC_PLAYLIST_DATA\", responseCallbackMethod: callbackFunction.name });\n    };\n    Loader.prototype.getPlaylistContainerItems = function (playlistId, callbackFunction) {\n        this.executeCommand(PlaybackCommands.PlaylistDataRequest, { dataType: \"PLAYLIST_CONTAINER_ITEMS\", referenceItem: playlistId, responseCallbackMethod: callbackFunction.name });\n    };\n    Loader.prototype.voteMusicTrack = function (id) {\n        this.executeCommand(PlaybackCommands.VotingPlaylistRequest, { action: \"VOTE\", referenceItem: id });\n    };\n    Loader.prototype.getVotedTracks = function (callbackFunction) {\n        this.executeCommand(PlaybackCommands.VotingPlaylistRequest, { action: \"GET_VOTED_ITEMS\", responseCallbackMethod: callbackFunction.name });\n    };\n    Loader.prototype.addPlaybackListener = function (callbackFunction) {\n        try {\n            window.Player.addPlaybackListener(this.playId, callbackFunction.name);\n        }\n        catch (err) {\n            console.log(\"Error while calling Player method: \" + err);\n        }\n    };\n    Loader.prototype.addPlaylistUpdateListener = function (callbackFunction) {\n        this.executeCommand(PlaybackCommands.RegisterNotifications, { notificationType: \"PLAYBACK_STREAM_UPDATED\", callbackMethod: callbackFunction.name });\n    };\n    Loader.prototype.addActiveMusicPlaylistChangeListener = function (callbackFunction) {\n        this.executeCommand(PlaybackCommands.RegisterNotifications, { notificationType: \"ACTIVE_MUSIC_PLAYLIST_CHANGED\", callbackMethod: callbackFunction.name });\n    };\n    Loader.prototype.sendChannelMessage = function (clientId, channelName, payload) {\n        this.executeCommand(PlaybackCommands.SendChannelMessage, { clientId: clientId, channelName: channelName, payload: payload });\n    };\n    Loader.prototype.joinChannel = function (clientId, channelName, callbackFunction) {\n        this.executeCommand(PlaybackCommands.JoinChannel, { clientId: clientId, channelName: channelName, callbackMethod: callbackFunction.name });\n    };\n    Loader.prototype.sendSerialMessageToConnectedDevice = function (baudRate, dataType, data, ignoreResponse) {\n        if (ignoreResponse === void 0) { ignoreResponse = false; }\n        return this.sendSerialMessageToTargetDevice(null, baudRate, dataType, data, ignoreResponse);\n    };\n    Loader.prototype.sendSerialMessageToTargetDevice = function (targetProductId, baudRate, dataType, data, ignoreResponse) {\n        if (ignoreResponse === void 0) { ignoreResponse = false; }\n        return this.executeCommandReturnPromise(PlaybackCommands.SendSerialMessage, {\n            serialMessageRequest: {\n                targetProductId: targetProductId,\n                baudRate: baudRate,\n                dataType: dataType,\n                data: data,\n                ignoreResponse: ignoreResponse\n            }\n        });\n    };\n    Loader.prototype.receiveSerialMessagesFromConnectedDevice = function (baudRate, dataType, retryOnError, callbackFunction, errorCallbackFunction) {\n        this.receiveSerialMessagesFromTargetDevice(null, baudRate, dataType, retryOnError, callbackFunction, errorCallbackFunction);\n    };\n    Loader.prototype.receiveSerialMessagesFromTargetDevice = function (targetProductId, baudRate, dataType, retryOnError, callbackFunction, errorCallbackFunction) {\n        this.executeCommand(PlaybackCommands.ReceiveSerialMessages, {\n            serialMessageRequest: {\n                targetProductId: targetProductId,\n                baudRate: baudRate,\n                dataType: dataType\n            },\n            retryOnError: retryOnError,\n            callbackMethod: callbackFunction.name,\n            errorCallbackMethod: errorCallbackFunction.name\n        });\n    };\n    Loader.prototype.getNewAnalyticsSessionId = function () {\n        return this.executeCommand(PlaybackCommands.GetNewAnalyticsSessionId, null);\n    };\n    Loader.prototype.getNewAnalyticsSessionIdPromise = function () {\n        return this.executeCommandReturnPromise(\"GET_NEW_ANALYTICS_SESSION_ID_PROMISE\", {});\n    };\n    Loader.prototype.createAnalyticsEvent = function (userTriggered, sessionId, customParameters) {\n        this.executeCommand(PlaybackCommands.CreateAnalyticsLog, {\n            userTriggered: userTriggered,\n            sessionId: sessionId,\n            customParameters: customParameters\n        });\n    };\n    Loader.prototype.isMediaFileAvailable = function (mediaId) {\n        return this.executeCommand(PlaybackCommands.IsMediaFileAvailable, mediaId) == \"true\";\n    };\n    Loader.prototype.areMediaFilesAvailable = function (mediaIds) {\n        return this.executeCommandReturnPromise(\"ARE_MEDIA_FILES_AVAILABLE\", {\n            mediaIds: mediaIds\n        });\n    };\n    Loader.prototype.sendDatagramMessage = function (targetAddress, port, dataType, message) {\n        return this.executeCommandReturnPromise(\"DATAGRAM_SEND\", {\n            targetAddress: targetAddress,\n            port: port,\n            dataType: dataType,\n            message: message\n        });\n    };\n    Loader.prototype.receiveDatagramMessages = function (multicastAddress, port, dataType, callbackFunction, errorCallbackFunction) {\n        this.executeCommand(\"DATAGRAM_RECEIVE\", {\n            multicastAddress: multicastAddress,\n            port: port,\n            dataType: dataType,\n            callbackMethod: callbackFunction.name,\n            errorCallbackMethod: errorCallbackFunction.name\n        });\n    };\n    Loader.prototype.setPlaylistItemsSchedules = function (schedules) {\n        this.executeCommand(\"SET_PLAYLIST_ITEMS_SCHEDULES\", schedules);\n    };\n    Loader.prototype.executeCommand = function (commandName, commandParams) {\n        try {\n            return window.Player.executeCommand(this.playId, commandName, JSON.stringify(commandParams));\n        }\n        catch (err) {\n            console.log(\"Error while calling Player method: \" + err);\n            return null;\n        }\n    };\n    Loader.prototype.executeCommandReturnPromise = function (commandName, commandParams) {\n        var successMethodName = this.getNextGlobalCallbackMethodName();\n        var errorMethodName = this.getNextGlobalCallbackMethodName();\n        var finalPlayId = this.playId;\n        return new Promise(function (resolve, reject) {\n            var clearData = function () {\n                delete window[successMethodName];\n                delete window[errorMethodName];\n            };\n            window[successMethodName] = function (response) {\n                clearData();\n                resolve(response);\n            };\n            window[errorMethodName] = function (errorMessage) {\n                clearData();\n                reject(new Error(errorMessage));\n            };\n            commandParams[\"callbackMethod\"] = successMethodName;\n            commandParams[\"errorCallbackMethod\"] = errorMethodName;\n            try {\n                window.Player.executeCommand(finalPlayId, commandName, JSON.stringify(commandParams));\n            }\n            catch (err) {\n                clearData();\n                reject(err);\n            }\n        });\n    };\n    Loader.prototype.play = function () {\n        if (!this.started) {\n            this.started = true;\n            this.startPromiseResolve();\n        }\n    };\n    Loader.prototype.getParameterByName = function (name, url) {\n        if (url === void 0) { url = window.location.href; }\n        if (!url)\n            url = window.location.href;\n        name = name.replace(/[[\\]]/g, \"\\\\$&\");\n        var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"), results = regex.exec(url);\n        if (!results)\n            return null;\n        if (!results[2])\n            return '';\n        return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n    };\n    Loader.prototype.getDataJson = function () {\n        var _this = this;\n        var mframeUrl = this.dataJson;\n        if (!mframeUrl) {\n            mframeUrl = 'mframe.json?timestamp=' + new Date().getTime();\n        }\n        var xhttp = new XMLHttpRequest();\n        xhttp.onreadystatechange = function () {\n            if (_this.platformType === \"tizen\") {\n                if (xhttp.readyState === 4) {\n                    if (xhttp.status === 200 || xhttp.status === 0) {\n                        if (xhttp.responseText !== null) {\n                            var components_1 = [];\n                            try {\n                                var dataJson = JSON.parse(xhttp.responseText);\n                                dataJson.components.forEach(function (c) {\n                                    if (typeof c.type === 'number' && c.params) {\n                                        // Hack to allow old/deprecated components.\n                                        components_1.push(new ComponentV1(c.type, c.params.value));\n                                    }\n                                    if (typeof c.type === 'string') {\n                                        components_1.push(new Component(c.name, c.type, c.params.map(function (p) { return new Param(p.name, p.type, p.value); })));\n                                    }\n                                    else {\n                                        components_1.push(Component.CreateTypelessComponent(c.name, c.params.map(function (p) { return new Param(p.name, p.type, p.value); })));\n                                    }\n                                });\n                            }\n                            catch (err) {\n                                _this.error(\"Error parsing \" + mframeUrl + \": \" + err.toString());\n                                return;\n                            }\n                            _this.componentsPromiseResolve(components_1);\n                        }\n                        else {\n                            xhttp.open('GET', mframeUrl);\n                            xhttp.send();\n                        }\n                    }\n                }\n            }\n            else {\n                if (xhttp.readyState === 4 && xhttp.status === 200) {\n                    var components_2 = [];\n                    try {\n                        var dataJson = JSON.parse(xhttp.responseText);\n                        dataJson.components.forEach(function (c) {\n                            if (typeof c.type === 'number' && c.params) {\n                                // Hack to allow old/deprecated components.\n                                components_2.push(new ComponentV1(c.type, c.params.value));\n                            }\n                            if (typeof c.type === 'string') {\n                                components_2.push(new Component(c.name, c.type, c.params.map(function (p) { return new Param(p.name, p.type, p.value); })));\n                            }\n                            else {\n                                components_2.push(Component.CreateTypelessComponent(c.name, c.params.map(function (p) { return new Param(p.name, p.type, p.value); })));\n                            }\n                        });\n                    }\n                    catch (err) {\n                        _this.error(\"Error parsing \" + mframeUrl + \": \" + err.toString());\n                        return;\n                    }\n                    _this.componentsPromiseResolve(components_2);\n                }\n                else if (xhttp.readyState === 4) {\n                    _this.error(\"Error loading \" + mframeUrl + \", httpStatus=\" + xhttp.status);\n                }\n            }\n            ;\n        };\n        xhttp.open('GET', mframeUrl);\n        xhttp.send();\n    };\n    return Loader;\n}());\nexports.Loader = Loader;\nwindow['Loader'] = window['Loader'] || new Loader();\n\n\n//# sourceURL=webpack://mtemplate-loader/./src/TemplateLoader.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/TemplateLoader.ts");
/******/ 	
/******/ })()
;